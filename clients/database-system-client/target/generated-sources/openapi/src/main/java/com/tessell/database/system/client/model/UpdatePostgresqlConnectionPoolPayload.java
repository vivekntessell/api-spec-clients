/*
 * Tessell Database System REST Web Services' API Documentation
 * Tessell Database System REST Web Services' Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.database.system.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.tessell.database.system.client.model.PostgresqlConnectionPoolMode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * Postgres engine specific configuration for updating a connection pool
 */
@ApiModel(description = "Postgres engine specific configuration for updating a connection pool")
@JsonPropertyOrder({
  UpdatePostgresqlConnectionPoolPayload.JSON_PROPERTY_DB_USERNAME,
  UpdatePostgresqlConnectionPoolPayload.JSON_PROPERTY_CONN_POOL_NAME,
  UpdatePostgresqlConnectionPoolPayload.JSON_PROPERTY_DB_NAME,
  UpdatePostgresqlConnectionPoolPayload.JSON_PROPERTY_CONN_POOL_MODE,
  UpdatePostgresqlConnectionPoolPayload.JSON_PROPERTY_CONN_POOL_SIZE
})
@JsonTypeName("UpdatePostgresqlConnectionPoolPayload")

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@lombok.experimental.SuperBuilder
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-01T22:16:40.788615+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class UpdatePostgresqlConnectionPoolPayload {
  public static final String JSON_PROPERTY_DB_USERNAME = "dbUsername";
  private String dbUsername;

  public static final String JSON_PROPERTY_CONN_POOL_NAME = "connPoolName";
  private String connPoolName;

  public static final String JSON_PROPERTY_DB_NAME = "dbName";
  private String dbName;

  public static final String JSON_PROPERTY_CONN_POOL_MODE = "connPoolMode";
  private PostgresqlConnectionPoolMode connPoolMode;

  public static final String JSON_PROPERTY_CONN_POOL_SIZE = "connPoolSize";
  private Integer connPoolSize;


  public UpdatePostgresqlConnectionPoolPayload dbUsername(String dbUsername) {
    
    this.dbUsername = dbUsername;
    return this;
  }

   /**
   * Database user name
   * @return dbUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Database user name")
  @JsonProperty(JSON_PROPERTY_DB_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDbUsername() {
    return dbUsername;
  }


  @JsonProperty(JSON_PROPERTY_DB_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDbUsername(String dbUsername) {
    this.dbUsername = dbUsername;
  }


  public UpdatePostgresqlConnectionPoolPayload connPoolName(String connPoolName) {
    
    this.connPoolName = connPoolName;
    return this;
  }

   /**
   * Name of the connection pool
   * @return connPoolName
  **/
  @ApiModelProperty(required = true, value = "Name of the connection pool")
  @JsonProperty(JSON_PROPERTY_CONN_POOL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConnPoolName() {
    return connPoolName;
  }


  @JsonProperty(JSON_PROPERTY_CONN_POOL_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnPoolName(String connPoolName) {
    this.connPoolName = connPoolName;
  }


  public UpdatePostgresqlConnectionPoolPayload dbName(String dbName) {
    
    this.dbName = dbName;
    return this;
  }

   /**
   * Name of the database for current connection pool
   * @return dbName
  **/
  @ApiModelProperty(required = true, value = "Name of the database for current connection pool")
  @JsonProperty(JSON_PROPERTY_DB_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDbName() {
    return dbName;
  }


  @JsonProperty(JSON_PROPERTY_DB_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDbName(String dbName) {
    this.dbName = dbName;
  }


  public UpdatePostgresqlConnectionPoolPayload connPoolMode(PostgresqlConnectionPoolMode connPoolMode) {
    
    this.connPoolMode = connPoolMode;
    return this;
  }

   /**
   * Get connPoolMode
   * @return connPoolMode
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONN_POOL_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PostgresqlConnectionPoolMode getConnPoolMode() {
    return connPoolMode;
  }


  @JsonProperty(JSON_PROPERTY_CONN_POOL_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnPoolMode(PostgresqlConnectionPoolMode connPoolMode) {
    this.connPoolMode = connPoolMode;
  }


  public UpdatePostgresqlConnectionPoolPayload connPoolSize(Integer connPoolSize) {
    
    this.connPoolSize = connPoolSize;
    return this;
  }

   /**
   * Size of connection pool
   * minimum: 1
   * maximum: 100000
   * @return connPoolSize
  **/
  @ApiModelProperty(required = true, value = "Size of connection pool")
  @JsonProperty(JSON_PROPERTY_CONN_POOL_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getConnPoolSize() {
    return connPoolSize;
  }


  @JsonProperty(JSON_PROPERTY_CONN_POOL_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnPoolSize(Integer connPoolSize) {
    this.connPoolSize = connPoolSize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePostgresqlConnectionPoolPayload updatePostgresqlConnectionPoolPayload = (UpdatePostgresqlConnectionPoolPayload) o;
    return Objects.equals(this.dbUsername, updatePostgresqlConnectionPoolPayload.dbUsername) &&
        Objects.equals(this.connPoolName, updatePostgresqlConnectionPoolPayload.connPoolName) &&
        Objects.equals(this.dbName, updatePostgresqlConnectionPoolPayload.dbName) &&
        Objects.equals(this.connPoolMode, updatePostgresqlConnectionPoolPayload.connPoolMode) &&
        Objects.equals(this.connPoolSize, updatePostgresqlConnectionPoolPayload.connPoolSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbUsername, connPoolName, dbName, connPoolMode, connPoolSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePostgresqlConnectionPoolPayload {\n");
    sb.append("    dbUsername: ").append(toIndentedString(dbUsername)).append("\n");
    sb.append("    connPoolName: ").append(toIndentedString(connPoolName)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    connPoolMode: ").append(toIndentedString(connPoolMode)).append("\n");
    sb.append("    connPoolSize: ").append(toIndentedString(connPoolSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

