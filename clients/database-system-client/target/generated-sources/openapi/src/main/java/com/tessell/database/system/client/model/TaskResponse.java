/*
 * Tessell Database System REST Web Services' API Documentation
 * Tessell Database System REST Web Services' Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.database.system.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.tessell.database.system.client.model.ApplyConfig;
import com.tessell.database.system.client.model.TaskDTO;
import com.tessell.database.system.client.model.TaskResponseConflicts;
import com.tessell.database.system.client.model.TaskResponseStatus;
import com.tessell.database.system.client.model.TaskSummary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * TaskResponse
 */
@JsonPropertyOrder({
  TaskResponse.JSON_PROPERTY_STATUS,
  TaskResponse.JSON_PROPERTY_APPLY_CONFIG,
  TaskResponse.JSON_PROPERTY_CONFLICTS,
  TaskResponse.JSON_PROPERTY_TASK_SUMMARY,
  TaskResponse.JSON_PROPERTY_TASK
})
@JsonTypeName("TaskResponse")

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@lombok.experimental.SuperBuilder
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-01T22:16:40.788615+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class TaskResponse {
  public static final String JSON_PROPERTY_STATUS = "status";
  private TaskResponseStatus status;

  public static final String JSON_PROPERTY_APPLY_CONFIG = "applyConfig";
  private ApplyConfig applyConfig;

  public static final String JSON_PROPERTY_CONFLICTS = "conflicts";
  private TaskResponseConflicts conflicts;

  public static final String JSON_PROPERTY_TASK_SUMMARY = "taskSummary";
  private TaskSummary taskSummary;

  public static final String JSON_PROPERTY_TASK = "task";
  private TaskDTO task;


  public TaskResponse status(TaskResponseStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaskResponseStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(TaskResponseStatus status) {
    this.status = status;
  }


  public TaskResponse applyConfig(ApplyConfig applyConfig) {
    
    this.applyConfig = applyConfig;
    return this;
  }

   /**
   * Get applyConfig
   * @return applyConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_APPLY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApplyConfig getApplyConfig() {
    return applyConfig;
  }


  @JsonProperty(JSON_PROPERTY_APPLY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplyConfig(ApplyConfig applyConfig) {
    this.applyConfig = applyConfig;
  }


  public TaskResponse conflicts(TaskResponseConflicts conflicts) {
    
    this.conflicts = conflicts;
    return this;
  }

   /**
   * Get conflicts
   * @return conflicts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONFLICTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaskResponseConflicts getConflicts() {
    return conflicts;
  }


  @JsonProperty(JSON_PROPERTY_CONFLICTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConflicts(TaskResponseConflicts conflicts) {
    this.conflicts = conflicts;
  }


  public TaskResponse taskSummary(TaskSummary taskSummary) {
    
    this.taskSummary = taskSummary;
    return this;
  }

   /**
   * Get taskSummary
   * @return taskSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TASK_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaskSummary getTaskSummary() {
    return taskSummary;
  }


  @JsonProperty(JSON_PROPERTY_TASK_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskSummary(TaskSummary taskSummary) {
    this.taskSummary = taskSummary;
  }


  public TaskResponse task(TaskDTO task) {
    
    this.task = task;
    return this;
  }

   /**
   * Get task
   * @return task
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaskDTO getTask() {
    return task;
  }


  @JsonProperty(JSON_PROPERTY_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTask(TaskDTO task) {
    this.task = task;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskResponse taskResponse = (TaskResponse) o;
    return Objects.equals(this.status, taskResponse.status) &&
        Objects.equals(this.applyConfig, taskResponse.applyConfig) &&
        Objects.equals(this.conflicts, taskResponse.conflicts) &&
        Objects.equals(this.taskSummary, taskResponse.taskSummary) &&
        Objects.equals(this.task, taskResponse.task);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, applyConfig, conflicts, taskSummary, task);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    applyConfig: ").append(toIndentedString(applyConfig)).append("\n");
    sb.append("    conflicts: ").append(toIndentedString(conflicts)).append("\n");
    sb.append("    taskSummary: ").append(toIndentedString(taskSummary)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

