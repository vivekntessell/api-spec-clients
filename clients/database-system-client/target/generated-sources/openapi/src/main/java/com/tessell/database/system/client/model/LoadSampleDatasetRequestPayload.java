/*
 * Tessell Database System REST Web Services' API Documentation
 * Tessell Database System REST Web Services' Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.database.system.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * Details needed to load a sample dataset in a DB Service
 */
@ApiModel(description = "Details needed to load a sample dataset in a DB Service")
@JsonPropertyOrder({
  LoadSampleDatasetRequestPayload.JSON_PROPERTY_DATASET_ID,
  LoadSampleDatasetRequestPayload.JSON_PROPERTY_DATASET_SIZE,
  LoadSampleDatasetRequestPayload.JSON_PROPERTY_DATABASE_ID,
  LoadSampleDatasetRequestPayload.JSON_PROPERTY_DATABASE_NAME,
  LoadSampleDatasetRequestPayload.JSON_PROPERTY_SCRIPT_ID,
  LoadSampleDatasetRequestPayload.JSON_PROPERTY_SCRIPT_NAME
})
@JsonTypeName("LoadSampleDatasetRequestPayload")

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@lombok.experimental.SuperBuilder
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-01T22:16:40.788615+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class LoadSampleDatasetRequestPayload {
  public static final String JSON_PROPERTY_DATASET_ID = "datasetId";
  private UUID datasetId;

  public static final String JSON_PROPERTY_DATASET_SIZE = "datasetSize";
  private Long datasetSize;

  public static final String JSON_PROPERTY_DATABASE_ID = "databaseId";
  private UUID databaseId;

  public static final String JSON_PROPERTY_DATABASE_NAME = "databaseName";
  private String databaseName;

  public static final String JSON_PROPERTY_SCRIPT_ID = "scriptId";
  private UUID scriptId;

  public static final String JSON_PROPERTY_SCRIPT_NAME = "scriptName";
  private String scriptName;


  public LoadSampleDatasetRequestPayload datasetId(UUID datasetId) {
    
    this.datasetId = datasetId;
    return this;
  }

   /**
   * Unique ID of Dataset to be loaded.
   * @return datasetId
  **/
  @ApiModelProperty(required = true, value = "Unique ID of Dataset to be loaded.")
  @JsonProperty(JSON_PROPERTY_DATASET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getDatasetId() {
    return datasetId;
  }


  @JsonProperty(JSON_PROPERTY_DATASET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatasetId(UUID datasetId) {
    this.datasetId = datasetId;
  }


  public LoadSampleDatasetRequestPayload datasetSize(Long datasetSize) {
    
    this.datasetSize = datasetSize;
    return this;
  }

   /**
   * Size in bytes to be loaded.
   * @return datasetSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Size in bytes to be loaded.")
  @JsonProperty(JSON_PROPERTY_DATASET_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDatasetSize() {
    return datasetSize;
  }


  @JsonProperty(JSON_PROPERTY_DATASET_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatasetSize(Long datasetSize) {
    this.datasetSize = datasetSize;
  }


  public LoadSampleDatasetRequestPayload databaseId(UUID databaseId) {
    
    this.databaseId = databaseId;
    return this;
  }

   /**
   * DB Service database ID in which we want to load sample data. Null if data is to be loaded in a new Database.
   * @return databaseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DB Service database ID in which we want to load sample data. Null if data is to be loaded in a new Database.")
  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getDatabaseId() {
    return databaseId;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabaseId(UUID databaseId) {
    this.databaseId = databaseId;
  }


  public LoadSampleDatasetRequestPayload databaseName(String databaseName) {
    
    this.databaseName = databaseName;
    return this;
  }

   /**
   * Name of the Database where sample dataset would be loaded.
   * @return databaseName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Database where sample dataset would be loaded.")
  @JsonProperty(JSON_PROPERTY_DATABASE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDatabaseName() {
    return databaseName;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public LoadSampleDatasetRequestPayload scriptId(UUID scriptId) {
    
    this.scriptId = scriptId;
    return this;
  }

   /**
   * Tessell Masking Script ID corresponding to this dataset
   * @return scriptId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tessell Masking Script ID corresponding to this dataset")
  @JsonProperty(JSON_PROPERTY_SCRIPT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getScriptId() {
    return scriptId;
  }


  @JsonProperty(JSON_PROPERTY_SCRIPT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScriptId(UUID scriptId) {
    this.scriptId = scriptId;
  }


  public LoadSampleDatasetRequestPayload scriptName(String scriptName) {
    
    this.scriptName = scriptName;
    return this;
  }

   /**
   * Masking Script name.
   * @return scriptName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Masking Script name.")
  @JsonProperty(JSON_PROPERTY_SCRIPT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScriptName() {
    return scriptName;
  }


  @JsonProperty(JSON_PROPERTY_SCRIPT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScriptName(String scriptName) {
    this.scriptName = scriptName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadSampleDatasetRequestPayload loadSampleDatasetRequestPayload = (LoadSampleDatasetRequestPayload) o;
    return Objects.equals(this.datasetId, loadSampleDatasetRequestPayload.datasetId) &&
        Objects.equals(this.datasetSize, loadSampleDatasetRequestPayload.datasetSize) &&
        Objects.equals(this.databaseId, loadSampleDatasetRequestPayload.databaseId) &&
        Objects.equals(this.databaseName, loadSampleDatasetRequestPayload.databaseName) &&
        Objects.equals(this.scriptId, loadSampleDatasetRequestPayload.scriptId) &&
        Objects.equals(this.scriptName, loadSampleDatasetRequestPayload.scriptName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetId, datasetSize, databaseId, databaseName, scriptId, scriptName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadSampleDatasetRequestPayload {\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    datasetSize: ").append(toIndentedString(datasetSize)).append("\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    scriptId: ").append(toIndentedString(scriptId)).append("\n");
    sb.append("    scriptName: ").append(toIndentedString(scriptName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

