/*
 * Tessell Tenant Onboarding Service API
 * Tenant Onboarding API
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.tenant.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.tessell.tenant.client.model.UpgradeType;
import com.tessell.tenant.client.model.VersionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * UpgradeInfraDeploymentRequest
 */
@JsonPropertyOrder({
  UpgradeInfraDeploymentRequest.JSON_PROPERTY_UPGRADE_TYPE,
  UpgradeInfraDeploymentRequest.JSON_PROPERTY_VERSION_TYPE,
  UpgradeInfraDeploymentRequest.JSON_PROPERTY_MAJOR_VERSION,
  UpgradeInfraDeploymentRequest.JSON_PROPERTY_MINOR_VERSION,
  UpgradeInfraDeploymentRequest.JSON_PROPERTY_SERVICE_MANIFEST
})
@JsonTypeName("UpgradeInfraDeploymentRequest")
@lombok.experimental.SuperBuilder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-02T15:57:18.240366+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class UpgradeInfraDeploymentRequest {
  public static final String JSON_PROPERTY_UPGRADE_TYPE = "upgradeType";
  private UpgradeType upgradeType;

  public static final String JSON_PROPERTY_VERSION_TYPE = "versionType";
  private VersionType versionType;

  public static final String JSON_PROPERTY_MAJOR_VERSION = "majorVersion";
  private Integer majorVersion;

  public static final String JSON_PROPERTY_MINOR_VERSION = "minorVersion";
  private Integer minorVersion;

  public static final String JSON_PROPERTY_SERVICE_MANIFEST = "serviceManifest";
  private Map<String, String> serviceManifest = null;


  public UpgradeInfraDeploymentRequest upgradeType(UpgradeType upgradeType) {
    
    this.upgradeType = upgradeType;
    return this;
  }

   /**
   * Get upgradeType
   * @return upgradeType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UPGRADE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UpgradeType getUpgradeType() {
    return upgradeType;
  }


  @JsonProperty(JSON_PROPERTY_UPGRADE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpgradeType(UpgradeType upgradeType) {
    this.upgradeType = upgradeType;
  }


  public UpgradeInfraDeploymentRequest versionType(VersionType versionType) {
    
    this.versionType = versionType;
    return this;
  }

   /**
   * Get versionType
   * @return versionType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_VERSION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public VersionType getVersionType() {
    return versionType;
  }


  @JsonProperty(JSON_PROPERTY_VERSION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersionType(VersionType versionType) {
    this.versionType = versionType;
  }


  public UpgradeInfraDeploymentRequest majorVersion(Integer majorVersion) {
    
    this.majorVersion = majorVersion;
    return this;
  }

   /**
   * To be defined if the version type is FIXED
   * @return majorVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "To be defined if the version type is FIXED")
  @JsonProperty(JSON_PROPERTY_MAJOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMajorVersion() {
    return majorVersion;
  }


  @JsonProperty(JSON_PROPERTY_MAJOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMajorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
  }


  public UpgradeInfraDeploymentRequest minorVersion(Integer minorVersion) {
    
    this.minorVersion = minorVersion;
    return this;
  }

   /**
   * To be defined if the version type is FIXED
   * @return minorVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "To be defined if the version type is FIXED")
  @JsonProperty(JSON_PROPERTY_MINOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinorVersion() {
    return minorVersion;
  }


  @JsonProperty(JSON_PROPERTY_MINOR_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinorVersion(Integer minorVersion) {
    this.minorVersion = minorVersion;
  }


  public UpgradeInfraDeploymentRequest serviceManifest(Map<String, String> serviceManifest) {
    
    this.serviceManifest = serviceManifest;
    return this;
  }

  public UpgradeInfraDeploymentRequest putServiceManifestItem(String key, String serviceManifestItem) {
    if (this.serviceManifest == null) {
      this.serviceManifest = new HashMap<>();
    }
    this.serviceManifest.put(key, serviceManifestItem);
    return this;
  }

   /**
   * Override the service versions
   * @return serviceManifest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Override the service versions")
  @JsonProperty(JSON_PROPERTY_SERVICE_MANIFEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getServiceManifest() {
    return serviceManifest;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_MANIFEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceManifest(Map<String, String> serviceManifest) {
    this.serviceManifest = serviceManifest;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeInfraDeploymentRequest upgradeInfraDeploymentRequest = (UpgradeInfraDeploymentRequest) o;
    return Objects.equals(this.upgradeType, upgradeInfraDeploymentRequest.upgradeType) &&
        Objects.equals(this.versionType, upgradeInfraDeploymentRequest.versionType) &&
        Objects.equals(this.majorVersion, upgradeInfraDeploymentRequest.majorVersion) &&
        Objects.equals(this.minorVersion, upgradeInfraDeploymentRequest.minorVersion) &&
        Objects.equals(this.serviceManifest, upgradeInfraDeploymentRequest.serviceManifest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(upgradeType, versionType, majorVersion, minorVersion, serviceManifest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeInfraDeploymentRequest {\n");
    sb.append("    upgradeType: ").append(toIndentedString(upgradeType)).append("\n");
    sb.append("    versionType: ").append(toIndentedString(versionType)).append("\n");
    sb.append("    majorVersion: ").append(toIndentedString(majorVersion)).append("\n");
    sb.append("    minorVersion: ").append(toIndentedString(minorVersion)).append("\n");
    sb.append("    serviceManifest: ").append(toIndentedString(serviceManifest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

