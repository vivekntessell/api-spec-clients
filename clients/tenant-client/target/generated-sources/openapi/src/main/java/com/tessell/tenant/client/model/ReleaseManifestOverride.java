/*
 * Tessell Tenant Onboarding Service API
 * Tenant Onboarding API
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.tenant.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.tessell.tenant.client.model.ReleaseManifestOverrideArtifactConfig;
import com.tessell.tenant.client.model.ReleaseManifestOverrideDockerImageConfig;
import com.tessell.tenant.client.model.ReleaseManifestOverrideHelmChartConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * Refer tessell-tenant-release-manifests GitHub repository for the keys to use.
 */
@ApiModel(description = "Refer tessell-tenant-release-manifests GitHub repository for the keys to use.")
@JsonPropertyOrder({
  ReleaseManifestOverride.JSON_PROPERTY_DOCKER_IMAGES,
  ReleaseManifestOverride.JSON_PROPERTY_HELM_CHARTS,
  ReleaseManifestOverride.JSON_PROPERTY_ARTIFACTS
})
@JsonTypeName("ReleaseManifestOverride")
@lombok.experimental.SuperBuilder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-02T15:57:18.240366+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class ReleaseManifestOverride {
  public static final String JSON_PROPERTY_DOCKER_IMAGES = "dockerImages";
  private Map<String, ReleaseManifestOverrideDockerImageConfig> dockerImages = null;

  public static final String JSON_PROPERTY_HELM_CHARTS = "helmCharts";
  private Map<String, ReleaseManifestOverrideHelmChartConfig> helmCharts = null;

  public static final String JSON_PROPERTY_ARTIFACTS = "artifacts";
  private Map<String, ReleaseManifestOverrideArtifactConfig> artifacts = null;


  public ReleaseManifestOverride dockerImages(Map<String, ReleaseManifestOverrideDockerImageConfig> dockerImages) {
    
    this.dockerImages = dockerImages;
    return this;
  }

  public ReleaseManifestOverride putDockerImagesItem(String key, ReleaseManifestOverrideDockerImageConfig dockerImagesItem) {
    if (this.dockerImages == null) {
      this.dockerImages = new HashMap<>();
    }
    this.dockerImages.put(key, dockerImagesItem);
    return this;
  }

   /**
   * Get dockerImages
   * @return dockerImages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DOCKER_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, ReleaseManifestOverrideDockerImageConfig> getDockerImages() {
    return dockerImages;
  }


  @JsonProperty(JSON_PROPERTY_DOCKER_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDockerImages(Map<String, ReleaseManifestOverrideDockerImageConfig> dockerImages) {
    this.dockerImages = dockerImages;
  }


  public ReleaseManifestOverride helmCharts(Map<String, ReleaseManifestOverrideHelmChartConfig> helmCharts) {
    
    this.helmCharts = helmCharts;
    return this;
  }

  public ReleaseManifestOverride putHelmChartsItem(String key, ReleaseManifestOverrideHelmChartConfig helmChartsItem) {
    if (this.helmCharts == null) {
      this.helmCharts = new HashMap<>();
    }
    this.helmCharts.put(key, helmChartsItem);
    return this;
  }

   /**
   * Get helmCharts
   * @return helmCharts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HELM_CHARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, ReleaseManifestOverrideHelmChartConfig> getHelmCharts() {
    return helmCharts;
  }


  @JsonProperty(JSON_PROPERTY_HELM_CHARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHelmCharts(Map<String, ReleaseManifestOverrideHelmChartConfig> helmCharts) {
    this.helmCharts = helmCharts;
  }


  public ReleaseManifestOverride artifacts(Map<String, ReleaseManifestOverrideArtifactConfig> artifacts) {
    
    this.artifacts = artifacts;
    return this;
  }

  public ReleaseManifestOverride putArtifactsItem(String key, ReleaseManifestOverrideArtifactConfig artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new HashMap<>();
    }
    this.artifacts.put(key, artifactsItem);
    return this;
  }

   /**
   * Get artifacts
   * @return artifacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ARTIFACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, ReleaseManifestOverrideArtifactConfig> getArtifacts() {
    return artifacts;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifacts(Map<String, ReleaseManifestOverrideArtifactConfig> artifacts) {
    this.artifacts = artifacts;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReleaseManifestOverride releaseManifestOverride = (ReleaseManifestOverride) o;
    return Objects.equals(this.dockerImages, releaseManifestOverride.dockerImages) &&
        Objects.equals(this.helmCharts, releaseManifestOverride.helmCharts) &&
        Objects.equals(this.artifacts, releaseManifestOverride.artifacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dockerImages, helmCharts, artifacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReleaseManifestOverride {\n");
    sb.append("    dockerImages: ").append(toIndentedString(dockerImages)).append("\n");
    sb.append("    helmCharts: ").append(toIndentedString(helmCharts)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

