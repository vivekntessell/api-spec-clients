/*
 * Tessell Tenant Onboarding Service API
 * Tenant Onboarding API
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.tenant.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * RepositoryComputeConfigPayload
 */
@JsonPropertyOrder({
  RepositoryComputeConfigPayload.JSON_PROPERTY_AMI_ID,
  RepositoryComputeConfigPayload.JSON_PROPERTY_INSTANCE_TYPE,
  RepositoryComputeConfigPayload.JSON_PROPERTY_DB_USERNAME,
  RepositoryComputeConfigPayload.JSON_PROPERTY_DB_PASSWORD,
  RepositoryComputeConfigPayload.JSON_PROPERTY_DB_PORT,
  RepositoryComputeConfigPayload.JSON_PROPERTY_SCHEMA_NAME,
  RepositoryComputeConfigPayload.JSON_PROPERTY_SCHEMA_S3_URL
})
@JsonTypeName("RepositoryComputeConfigPayload")
@lombok.experimental.SuperBuilder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-02T15:57:18.240366+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class RepositoryComputeConfigPayload {
  public static final String JSON_PROPERTY_AMI_ID = "amiId";
  private String amiId;

  public static final String JSON_PROPERTY_INSTANCE_TYPE = "instanceType";
  private String instanceType;

  public static final String JSON_PROPERTY_DB_USERNAME = "dbUsername";
  private String dbUsername;

  public static final String JSON_PROPERTY_DB_PASSWORD = "dbPassword";
  private String dbPassword;

  public static final String JSON_PROPERTY_DB_PORT = "dbPort";
  private String dbPort;

  public static final String JSON_PROPERTY_SCHEMA_NAME = "schemaName";
  private String schemaName;

  public static final String JSON_PROPERTY_SCHEMA_S3_URL = "schemaS3Url";
  private String schemaS3Url;


  public RepositoryComputeConfigPayload amiId(String amiId) {
    
    this.amiId = amiId;
    return this;
  }

   /**
   * Get amiId
   * @return amiId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AMI_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmiId() {
    return amiId;
  }


  @JsonProperty(JSON_PROPERTY_AMI_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmiId(String amiId) {
    this.amiId = amiId;
  }


  public RepositoryComputeConfigPayload instanceType(String instanceType) {
    
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Get instanceType
   * @return instanceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INSTANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInstanceType() {
    return instanceType;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public RepositoryComputeConfigPayload dbUsername(String dbUsername) {
    
    this.dbUsername = dbUsername;
    return this;
  }

   /**
   * Get dbUsername
   * @return dbUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DB_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDbUsername() {
    return dbUsername;
  }


  @JsonProperty(JSON_PROPERTY_DB_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDbUsername(String dbUsername) {
    this.dbUsername = dbUsername;
  }


  public RepositoryComputeConfigPayload dbPassword(String dbPassword) {
    
    this.dbPassword = dbPassword;
    return this;
  }

   /**
   * Get dbPassword
   * @return dbPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DB_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDbPassword() {
    return dbPassword;
  }


  @JsonProperty(JSON_PROPERTY_DB_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDbPassword(String dbPassword) {
    this.dbPassword = dbPassword;
  }


  public RepositoryComputeConfigPayload dbPort(String dbPort) {
    
    this.dbPort = dbPort;
    return this;
  }

   /**
   * Get dbPort
   * @return dbPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DB_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDbPort() {
    return dbPort;
  }


  @JsonProperty(JSON_PROPERTY_DB_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDbPort(String dbPort) {
    this.dbPort = dbPort;
  }


  public RepositoryComputeConfigPayload schemaName(String schemaName) {
    
    this.schemaName = schemaName;
    return this;
  }

   /**
   * Get schemaName
   * @return schemaName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SCHEMA_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSchemaName() {
    return schemaName;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public RepositoryComputeConfigPayload schemaS3Url(String schemaS3Url) {
    
    this.schemaS3Url = schemaS3Url;
    return this;
  }

   /**
   * Get schemaS3Url
   * @return schemaS3Url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SCHEMA_S3_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSchemaS3Url() {
    return schemaS3Url;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_S3_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemaS3Url(String schemaS3Url) {
    this.schemaS3Url = schemaS3Url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryComputeConfigPayload repositoryComputeConfigPayload = (RepositoryComputeConfigPayload) o;
    return Objects.equals(this.amiId, repositoryComputeConfigPayload.amiId) &&
        Objects.equals(this.instanceType, repositoryComputeConfigPayload.instanceType) &&
        Objects.equals(this.dbUsername, repositoryComputeConfigPayload.dbUsername) &&
        Objects.equals(this.dbPassword, repositoryComputeConfigPayload.dbPassword) &&
        Objects.equals(this.dbPort, repositoryComputeConfigPayload.dbPort) &&
        Objects.equals(this.schemaName, repositoryComputeConfigPayload.schemaName) &&
        Objects.equals(this.schemaS3Url, repositoryComputeConfigPayload.schemaS3Url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amiId, instanceType, dbUsername, dbPassword, dbPort, schemaName, schemaS3Url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryComputeConfigPayload {\n");
    sb.append("    amiId: ").append(toIndentedString(amiId)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    dbUsername: ").append(toIndentedString(dbUsername)).append("\n");
    sb.append("    dbPassword: ").append(toIndentedString(dbPassword)).append("\n");
    sb.append("    dbPort: ").append(toIndentedString(dbPort)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    schemaS3Url: ").append(toIndentedString(schemaS3Url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

