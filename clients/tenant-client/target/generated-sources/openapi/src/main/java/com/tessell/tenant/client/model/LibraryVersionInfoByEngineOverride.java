/*
 * Tessell Tenant Onboarding Service API
 * Tenant Onboarding API
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.tenant.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * LibraryVersionInfoByEngineOverride
 */
@JsonPropertyOrder({
  LibraryVersionInfoByEngineOverride.JSON_PROPERTY_ORACLE,
  LibraryVersionInfoByEngineOverride.JSON_PROPERTY_POSTGRESQL,
  LibraryVersionInfoByEngineOverride.JSON_PROPERTY_MYSQL,
  LibraryVersionInfoByEngineOverride.JSON_PROPERTY_SQLSERVER,
  LibraryVersionInfoByEngineOverride.JSON_PROPERTY_APACHE_KAFKA,
  LibraryVersionInfoByEngineOverride.JSON_PROPERTY_MONGODB
})
@JsonTypeName("LibraryVersionInfoByEngineOverride")
@lombok.experimental.SuperBuilder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-02T15:57:18.240366+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class LibraryVersionInfoByEngineOverride {
  public static final String JSON_PROPERTY_ORACLE = "oracle";
  private String oracle;

  public static final String JSON_PROPERTY_POSTGRESQL = "postgresql";
  private String postgresql;

  public static final String JSON_PROPERTY_MYSQL = "mysql";
  private String mysql;

  public static final String JSON_PROPERTY_SQLSERVER = "sqlserver";
  private String sqlserver;

  public static final String JSON_PROPERTY_APACHE_KAFKA = "apache_kafka";
  private String apacheKafka;

  public static final String JSON_PROPERTY_MONGODB = "mongodb";
  private String mongodb;


  public LibraryVersionInfoByEngineOverride oracle(String oracle) {
    
    this.oracle = oracle;
    return this;
  }

   /**
   * Get oracle
   * @return oracle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ORACLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOracle() {
    return oracle;
  }


  @JsonProperty(JSON_PROPERTY_ORACLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOracle(String oracle) {
    this.oracle = oracle;
  }


  public LibraryVersionInfoByEngineOverride postgresql(String postgresql) {
    
    this.postgresql = postgresql;
    return this;
  }

   /**
   * Get postgresql
   * @return postgresql
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_POSTGRESQL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPostgresql() {
    return postgresql;
  }


  @JsonProperty(JSON_PROPERTY_POSTGRESQL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostgresql(String postgresql) {
    this.postgresql = postgresql;
  }


  public LibraryVersionInfoByEngineOverride mysql(String mysql) {
    
    this.mysql = mysql;
    return this;
  }

   /**
   * Get mysql
   * @return mysql
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MYSQL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMysql() {
    return mysql;
  }


  @JsonProperty(JSON_PROPERTY_MYSQL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMysql(String mysql) {
    this.mysql = mysql;
  }


  public LibraryVersionInfoByEngineOverride sqlserver(String sqlserver) {
    
    this.sqlserver = sqlserver;
    return this;
  }

   /**
   * Get sqlserver
   * @return sqlserver
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SQLSERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSqlserver() {
    return sqlserver;
  }


  @JsonProperty(JSON_PROPERTY_SQLSERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSqlserver(String sqlserver) {
    this.sqlserver = sqlserver;
  }


  public LibraryVersionInfoByEngineOverride apacheKafka(String apacheKafka) {
    
    this.apacheKafka = apacheKafka;
    return this;
  }

   /**
   * Get apacheKafka
   * @return apacheKafka
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_APACHE_KAFKA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getApacheKafka() {
    return apacheKafka;
  }


  @JsonProperty(JSON_PROPERTY_APACHE_KAFKA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApacheKafka(String apacheKafka) {
    this.apacheKafka = apacheKafka;
  }


  public LibraryVersionInfoByEngineOverride mongodb(String mongodb) {
    
    this.mongodb = mongodb;
    return this;
  }

   /**
   * Get mongodb
   * @return mongodb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MONGODB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMongodb() {
    return mongodb;
  }


  @JsonProperty(JSON_PROPERTY_MONGODB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMongodb(String mongodb) {
    this.mongodb = mongodb;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryVersionInfoByEngineOverride libraryVersionInfoByEngineOverride = (LibraryVersionInfoByEngineOverride) o;
    return Objects.equals(this.oracle, libraryVersionInfoByEngineOverride.oracle) &&
        Objects.equals(this.postgresql, libraryVersionInfoByEngineOverride.postgresql) &&
        Objects.equals(this.mysql, libraryVersionInfoByEngineOverride.mysql) &&
        Objects.equals(this.sqlserver, libraryVersionInfoByEngineOverride.sqlserver) &&
        Objects.equals(this.apacheKafka, libraryVersionInfoByEngineOverride.apacheKafka) &&
        Objects.equals(this.mongodb, libraryVersionInfoByEngineOverride.mongodb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oracle, postgresql, mysql, sqlserver, apacheKafka, mongodb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryVersionInfoByEngineOverride {\n");
    sb.append("    oracle: ").append(toIndentedString(oracle)).append("\n");
    sb.append("    postgresql: ").append(toIndentedString(postgresql)).append("\n");
    sb.append("    mysql: ").append(toIndentedString(mysql)).append("\n");
    sb.append("    sqlserver: ").append(toIndentedString(sqlserver)).append("\n");
    sb.append("    apacheKafka: ").append(toIndentedString(apacheKafka)).append("\n");
    sb.append("    mongodb: ").append(toIndentedString(mongodb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

