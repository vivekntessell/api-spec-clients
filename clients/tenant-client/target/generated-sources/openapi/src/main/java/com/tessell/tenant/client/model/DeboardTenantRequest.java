/*
 * Tessell Tenant Onboarding Service API
 * Tenant Onboarding API
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.tenant.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * DeboardTenantRequest
 */
@JsonPropertyOrder({
  DeboardTenantRequest.JSON_PROPERTY_SUBSCRIPTIONS_TO_KEEP,
  DeboardTenantRequest.JSON_PROPERTY_RETAIN_TENANT
})
@JsonTypeName("DeboardTenantRequest")
@lombok.experimental.SuperBuilder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-02T15:57:18.240366+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class DeboardTenantRequest {
  public static final String JSON_PROPERTY_SUBSCRIPTIONS_TO_KEEP = "subscriptionsToKeep";
  private List<String> subscriptionsToKeep = null;

  public static final String JSON_PROPERTY_RETAIN_TENANT = "retainTenant";
  private Boolean retainTenant = false;


  public DeboardTenantRequest subscriptionsToKeep(List<String> subscriptionsToKeep) {
    
    this.subscriptionsToKeep = subscriptionsToKeep;
    return this;
  }

  public DeboardTenantRequest addSubscriptionsToKeepItem(String subscriptionsToKeepItem) {
    if (this.subscriptionsToKeep == null) {
      this.subscriptionsToKeep = new ArrayList<>();
    }
    this.subscriptionsToKeep.add(subscriptionsToKeepItem);
    return this;
  }

   /**
   * Get subscriptionsToKeep
   * @return subscriptionsToKeep
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTIONS_TO_KEEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSubscriptionsToKeep() {
    return subscriptionsToKeep;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTIONS_TO_KEEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriptionsToKeep(List<String> subscriptionsToKeep) {
    this.subscriptionsToKeep = subscriptionsToKeep;
  }


  public DeboardTenantRequest retainTenant(Boolean retainTenant) {
    
    this.retainTenant = retainTenant;
    return this;
  }

   /**
   * Whether to retain tenant or not
   * @return retainTenant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to retain tenant or not")
  @JsonProperty(JSON_PROPERTY_RETAIN_TENANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRetainTenant() {
    return retainTenant;
  }


  @JsonProperty(JSON_PROPERTY_RETAIN_TENANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetainTenant(Boolean retainTenant) {
    this.retainTenant = retainTenant;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeboardTenantRequest deboardTenantRequest = (DeboardTenantRequest) o;
    return Objects.equals(this.subscriptionsToKeep, deboardTenantRequest.subscriptionsToKeep) &&
        Objects.equals(this.retainTenant, deboardTenantRequest.retainTenant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscriptionsToKeep, retainTenant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeboardTenantRequest {\n");
    sb.append("    subscriptionsToKeep: ").append(toIndentedString(subscriptionsToKeep)).append("\n");
    sb.append("    retainTenant: ").append(toIndentedString(retainTenant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

