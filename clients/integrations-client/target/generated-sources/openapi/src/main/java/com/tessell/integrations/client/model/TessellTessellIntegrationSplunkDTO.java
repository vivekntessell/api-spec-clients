/*
 * REST API Documentation
 * REST API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@tessell.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.integrations.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.tessell.integrations.client.model.TessellTessellIntegrationSplunkServerTypeDTO;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * TessellTessellIntegrationSplunkDTO
 */
@JsonPropertyOrder({
  TessellTessellIntegrationSplunkDTO.JSON_PROPERTY_HOSTNAME,
  TessellTessellIntegrationSplunkDTO.JSON_PROPERTY_PORT,
  TessellTessellIntegrationSplunkDTO.JSON_PROPERTY_API_TOKEN,
  TessellTessellIntegrationSplunkDTO.JSON_PROPERTY_INDEX,
  TessellTessellIntegrationSplunkDTO.JSON_PROPERTY_SERVER_TYPE
})
@JsonTypeName("TessellIntegrationSplunk")
@lombok.Builder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-02T15:56:57.635527+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class TessellTessellIntegrationSplunkDTO {
  public static final String JSON_PROPERTY_HOSTNAME = "hostname";
  private String hostname;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port;

  public static final String JSON_PROPERTY_API_TOKEN = "apiToken";
  private String apiToken;

  public static final String JSON_PROPERTY_INDEX = "index";
  private String index;

  public static final String JSON_PROPERTY_SERVER_TYPE = "serverType";
  private TessellTessellIntegrationSplunkServerTypeDTO serverType;


  public TessellTessellIntegrationSplunkDTO hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHostname() {
    return hostname;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public TessellTessellIntegrationSplunkDTO port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * server port for splunk
   * @return port
  **/
  @ApiModelProperty(required = true, value = "server port for splunk")
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPort(Integer port) {
    this.port = port;
  }


  public TessellTessellIntegrationSplunkDTO apiToken(String apiToken) {
    
    this.apiToken = apiToken;
    return this;
  }

   /**
   * Get apiToken
   * @return apiToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_API_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getApiToken() {
    return apiToken;
  }


  @JsonProperty(JSON_PROPERTY_API_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApiToken(String apiToken) {
    this.apiToken = apiToken;
  }


  public TessellTessellIntegrationSplunkDTO index(String index) {
    
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndex(String index) {
    this.index = index;
  }


  public TessellTessellIntegrationSplunkDTO serverType(TessellTessellIntegrationSplunkServerTypeDTO serverType) {
    
    this.serverType = serverType;
    return this;
  }

   /**
   * Get serverType
   * @return serverType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SERVER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TessellTessellIntegrationSplunkServerTypeDTO getServerType() {
    return serverType;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServerType(TessellTessellIntegrationSplunkServerTypeDTO serverType) {
    this.serverType = serverType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TessellTessellIntegrationSplunkDTO tessellIntegrationSplunk = (TessellTessellIntegrationSplunkDTO) o;
    return Objects.equals(this.hostname, tessellIntegrationSplunk.hostname) &&
        Objects.equals(this.port, tessellIntegrationSplunk.port) &&
        Objects.equals(this.apiToken, tessellIntegrationSplunk.apiToken) &&
        Objects.equals(this.index, tessellIntegrationSplunk.index) &&
        Objects.equals(this.serverType, tessellIntegrationSplunk.serverType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostname, port, apiToken, index, serverType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TessellTessellIntegrationSplunkDTO {\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    apiToken: ").append(toIndentedString(apiToken)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    serverType: ").append(toIndentedString(serverType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

