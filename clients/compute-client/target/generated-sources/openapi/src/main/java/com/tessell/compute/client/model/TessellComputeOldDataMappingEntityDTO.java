/*
 * Compute Governance API Documentation
 * Compute Governance  API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@tessell.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.compute.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * Compute Old Data Mapping Entity
 */
@ApiModel(description = "Compute Old Data Mapping Entity")
@JsonPropertyOrder({
  TessellComputeOldDataMappingEntityDTO.JSON_PROPERTY_COMPUTE_OLD_ID,
  TessellComputeOldDataMappingEntityDTO.JSON_PROPERTY_COMPUTE_ID
})
@JsonTypeName("ComputeOldDataMappingEntity")
@lombok.Builder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-02T15:56:15.462654+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class TessellComputeOldDataMappingEntityDTO {
  public static final String JSON_PROPERTY_COMPUTE_OLD_ID = "computeOldId";
  private UUID computeOldId;

  public static final String JSON_PROPERTY_COMPUTE_ID = "computeId";
  private UUID computeId;


  public TessellComputeOldDataMappingEntityDTO computeOldId(UUID computeOldId) {
    
    this.computeOldId = computeOldId;
    return this;
  }

   /**
   * Compute Old Id
   * @return computeOldId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Compute Old Id")
  @JsonProperty(JSON_PROPERTY_COMPUTE_OLD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getComputeOldId() {
    return computeOldId;
  }


  @JsonProperty(JSON_PROPERTY_COMPUTE_OLD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComputeOldId(UUID computeOldId) {
    this.computeOldId = computeOldId;
  }


  public TessellComputeOldDataMappingEntityDTO computeId(UUID computeId) {
    
    this.computeId = computeId;
    return this;
  }

   /**
   * Compute New Id
   * @return computeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Compute New Id")
  @JsonProperty(JSON_PROPERTY_COMPUTE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getComputeId() {
    return computeId;
  }


  @JsonProperty(JSON_PROPERTY_COMPUTE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComputeId(UUID computeId) {
    this.computeId = computeId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TessellComputeOldDataMappingEntityDTO computeOldDataMappingEntity = (TessellComputeOldDataMappingEntityDTO) o;
    return Objects.equals(this.computeOldId, computeOldDataMappingEntity.computeOldId) &&
        Objects.equals(this.computeId, computeOldDataMappingEntity.computeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeOldId, computeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TessellComputeOldDataMappingEntityDTO {\n");
    sb.append("    computeOldId: ").append(toIndentedString(computeOldId)).append("\n");
    sb.append("    computeId: ").append(toIndentedString(computeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

