/*
 * Tessell Monitoring Service API
 * Monitoring API
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.tessell.monitoring.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
/**
 * TopProcessesMetricValueOps
 */
@JsonPropertyOrder({
  TopProcessesMetricValueOps.JSON_PROPERTY_PROCESS_NAME,
  TopProcessesMetricValueOps.JSON_PROPERTY_PID,
  TopProcessesMetricValueOps.JSON_PROPERTY_VALUE
})
@JsonTypeName("TopProcessesMetricValueOps")
@lombok.experimental.SuperBuilder
@lombok.NoArgsConstructor
@lombok.AllArgsConstructor
@javax.annotation.Generated(value = "com.tessell.codegen.TessellJavaGenerator", date = "2024-05-02T15:57:03.958037+05:30[Asia/Kolkata]")
@JsonIgnoreProperties(ignoreUnknown = true)
public class TopProcessesMetricValueOps {
  public static final String JSON_PROPERTY_PROCESS_NAME = "processName";
  private String processName;

  public static final String JSON_PROPERTY_PID = "pid";
  private String pid;

  public static final String JSON_PROPERTY_VALUE = "value";
  private Double value;


  public TopProcessesMetricValueOps processName(String processName) {
    
    this.processName = processName;
    return this;
  }

   /**
   * Get processName
   * @return processName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PROCESS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessName() {
    return processName;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessName(String processName) {
    this.processName = processName;
  }


  public TopProcessesMetricValueOps pid(String pid) {
    
    this.pid = pid;
    return this;
  }

   /**
   * Get pid
   * @return pid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPid() {
    return pid;
  }


  @JsonProperty(JSON_PROPERTY_PID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPid(String pid) {
    this.pid = pid;
  }


  public TopProcessesMetricValueOps value(Double value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(Double value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopProcessesMetricValueOps topProcessesMetricValueOps = (TopProcessesMetricValueOps) o;
    return Objects.equals(this.processName, topProcessesMetricValueOps.processName) &&
        Objects.equals(this.pid, topProcessesMetricValueOps.pid) &&
        Objects.equals(this.value, topProcessesMetricValueOps.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processName, pid, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopProcessesMetricValueOps {\n");
    sb.append("    processName: ").append(toIndentedString(processName)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

