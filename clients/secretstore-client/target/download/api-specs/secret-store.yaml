openapi: 3.0.3
info:
  title: Tessell REST API Documentation
  description: Tessell REST API Documentation
  termsOfService: https://www.tessell.com/terms
  contact:
    name: Tessell Inc
    url: https://www.tessell.com
    email: support@tessell.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: '1.0'
servers:
  - url: http://tessell-security:8080
    description: Inferred Url
paths:
  /tessell-ops/secret-store/secrets:
    get:
      operationId: getAllSecrets
      summary: Get all secrets metadata
      tags:
        - secret-store
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: false
          style: simple
          schema:
            type: string
        - name: secret-type
          in: query
          description: Type of the Secret
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/SecretType'
        - name: group-id
          in: query
          description: Group ID for the secret, eg serviceID
          required: false
          style: form
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsApiResponse'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/secret:
    get:
      operationId: getSecret
      summary: Get a secret
      tags:
        - secret-store
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: false
          style: simple
          schema:
            type: string
        - name: secret-type
          in: query
          description: Type of the Secret
          required: true
          style: form
          schema:
            $ref: '#/components/schemas/SecretType'
        - name: id
          in: query
          description: UUID of the secret
          required: false
          style: form
          schema:
            type: string
            format: UUID
        - name: key-name
          in: query
          description: Key name of the secret
          required: false
          style: form
          schema:
            type: string
        - name: external-id
          in: query
          description: External Id of the secret
          required: false
          style: form
          schema:
            type: string
        - name: group-id
          in: query
          description: Group ID for the secret, eg serviceID
          required: false
          style: form
          schema:
            type: string
        - name: subscription-id
          in: query
          description: Subscription Id
          required: false
          style: form
          schema:
            type: string
            format: UUID
        - name: cloud
          in: query
          description: cloud
          required: false
          style: form
          schema:
            "$ref": "common-specification.yaml#/components/schemas/cloudType"
        - name: cloud-account-id
          in: query
          description: Cloud Account Id of the secret
          required: false
          style: form
          schema:
            type: string
            format: UUID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDTO'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
    post:
      operationId: createSecret
      summary: Create a secret
      tags:
        - secret-store
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: false
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSecretPayload"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDTO'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
    delete:
      operationId: deleteSecrets
      summary: Delete secrets on given condition
      tags:
        - secret-store
      parameters:
        - name: key-name
          in: query
          description: Secrets in given regions will be deleted for the keyName
          required: false
          style: form
          schema:
            type: string
        - name: delete-by-group-id
          in: query
          description: Secrets in all regions will be deleted for the given group
          required: false
          style: form
          schema:
            type: string
        - name: delete-in-all-regions
          in: query
          description: Secrets in all regions will be deleted
          required: false
          style: form
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteSecretPayload"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretsApiResponse'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/secret/{id}:
    get:
      operationId: getSecretById
      summary: Get secret
      tags:
        - secret-store
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: true
          style: simple
          schema:
            type: string
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: UUID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDTO'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
    patch:
      operationId: updateSecretValue
      summary: Update secret's value
      tags:
        - secret-store
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: false
          style: simple
          schema:
            type: string
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: UUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSecretPayload"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDTO'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
    delete:
      operationId: deleteSecretValue
      summary: Delete secret's value
      tags:
        - secret-store
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: false
          style: simple
          schema:
            type: string
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: UUID
        - name: delete-in-all-regions
          in: query
          description: Secrets in all regions will be deleted
          required: false
          style: form
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteSecretPayload"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDTO'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/secret/{id}/availability:
    patch:
      operationId: updateSecretAvailability
      summary: Update secret's availability
      tags:
        - secret-store
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: false
          style: simple
          schema:
            type: string
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: UUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSecretAvailability"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDTO'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/secret/{id}/replicate:
    patch:
      operationId: replicate secret to different cloud account
      summary: Replicate secret
      tags:
        - secret-store
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
            format: UUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplicateSecret"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDTO'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/secret/replicate:
    patch:
      operationId: replicate secret by keyName
      summary: Replicate secret
      tags:
        - secret-store
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplicateSecret"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDTO'
          description: OK
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/bulk-delete:
    post:
      tags:
        - secret-store
      summary: get status of bulk delete api
      operationId: getBulkDeleteSecretsStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteSecretsStatusPayload'
      responses:
        '200':
          description: OK
          content:
            "application/json":
              schema:
                $ref: 'common-specification.yaml#/components/schemas/ResourceBulkDeleteResponseOps'
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
    delete:
      tags:
        - secret-store
      summary: delete the secrets for subscription or tenant-id.
      operationId: bulkDeleteSecrets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteSecretsPayload'
      responses:
        '200':
          description: OK
          content:
            "application/json":
              schema:
                $ref: 'common-specification.yaml#/components/schemas/ResourceBulkDeleteResponseOps'
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/secret-encryption-key-mappings:
    get:
      tags:
        - secret-store-key-map
      summary: get current mappings for key to be used to encrypt secret in a cloud location
      operationId: getSecretEncryptionKeyMapping
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: true
          style: form
          schema:
            type: string
        - name: subscription-id
          in: query
          description: Subscription Id
          required: false
          style: form
          schema:
            type: string
            format: UUID
        - name: cloud
          in: query
          description: cloud
          required: false
          style: form
          schema:
            "$ref": "common-specification.yaml#/components/schemas/cloudType"
        - name: cloud-account-id
          in: query
          description: Cloud Account Id of the key
          required: false
          style: form
          schema:
            type: string
            format: UUID
        - name: region
          in: query
          description: Region of the key
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/SecretKeyMapApiResponse'
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
    post:
      tags:
        - secret-store-key-map
      summary: create a mapping for key to be used to encrypt secret in a cloud location
      operationId: createSecretEncryptionKeyMapping
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: true
          style: form
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SecretKeyMapCreatePayload'
      responses:
        '200':
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecretEncryptionEntity'
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/secret-encryption-key-mappings/{id}:
    patch:
      tags:
        - secret-store-key-map
      summary: update a mapping for key to be used to encrypt secret in a cloud location
      operationId: updateSecretEncryptionKeyMapping
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: true
          style: form
          schema:
            type: string
        - name: id
          in: path
          description: id of the key mapping
          required: true
          style: form
          schema:
            type: string
            format: UUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretKeyMapUpdatePayload'
      responses:
        '200':
          description: OK
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/SecretEncryptionEntity'
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
    delete:
      tags:
        - secret-store-key-map
      summary: delete a mapping for key to be used to encrypt secret in a cloud location
      operationId: deleteSecretEncryptionKeyMapping
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: true
          style: form
          schema:
            type: string
        - name: id
          in: path
          description: id of the key mapping
          required: true
          style: form
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: OK
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/SecretEncryptionEntity'
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/encrypt-secrets:
    post:
      tags:
        - secret-store
      summary: encrypt all existing secrets that are not already encrypted
      operationId: encryptAllSecrets
      parameters:
        - name: tenant-id
          in: header
          description: tenant-id
          required: true
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/SecretsMigrationApiResponse'
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps
  /tessell-ops/secret-store/add-tags:
    post:
      tags:
        - secret-store
      summary: Add tags required to clean up the existing secrets
      operationId: addAdditionalTagsToSecrets
      responses:
        '200':
          description: OK
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/TagsAdditionApiResponse'
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: common-specification.yaml#/components/schemas/ApiErrorOps

components:
  schemas:
    CreateSecretPayload:
      title: CreateSecretPayload
      type: object
      properties:
        secretType:
          type: string
          $ref: '#/components/schemas/SecretType'
        cloud:
          "$ref": "common-specification.yaml#/components/schemas/cloudType"
        subscriptionId:
          format: uuid
          type: string
        cloudAccountId:
          format: uuid
          type: string
        regions:
          type: array
          items:
            type: string
        groupId:
          type: string
        tags:
          description: The tags associated with the secret
          type: array
          items:
            $ref: 'common-specification.yaml#/components/schemas/TessellTag'
        secret:
          $ref: "#/components/schemas/Secret"
      example:
        secretType: TENANT_ASSET
        cloud: AWS
        subscriptionId: 5gh40f64-5717-4562-b3fc-2c963f66afa6
        cloudAccountId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        region: 'us-east-2'
        secret:
          keyName: DB-CRED_9d79e1f8-1bk3-4b79-8580-e935ea3b8ca3
          value: {"masterPassword": "Tessell123", "monitorPassword": "Pass10ZmBR3VA7", "saPassword": "Pass#1bQN6vK3kl"}

    Secret:
      title: Secret
      type: object
      properties:
        keyName:
          type: string
          description: Key Name of the secret
        value:
          type: string
          description: Value of the secret
          x-dto-annotations: |
            @ToString.Exclude
        file:
          type: string
          format: byte
          description: Value of the secret in bytes
          x-dto-annotations: |
            @ToString.Exclude

    UpdateSecretPayload:
      title: UpdateSecretPayload
      type: object
      properties:
        value:
          type: string
          description: Value of the secret
        file:
          type: string
          format: byte
          description: Value of the secret in bytes

    UpdateSecretAvailability:
      type: object
      description: This is a definition for Tessell secret region availability
      title: UpdateSecretAvailability
      properties:
        regions:
          type: array
          items:
            type: string

    ReplicateSecret:
      type: object
      description: This is a definition for Tessell secret replication across data plane
      title: ReplicateSecret
      properties:
        keyName:
          type: string
          description: Key Name of the secret
        cloudAccounts:
          type: array
          items:
            $ref: "#/components/schemas/SecretStoreCloudAccount"
    SecretStoreCloudAccount:
      type: object
      description: Cloud account
      title: CloudAccount
      properties:
        cloud:
          "$ref": "common-specification.yaml#/components/schemas/cloudType"
        subscriptionId:
          type: string
          format: uuid
        cloudAccountId:
          type: string
          format: uuid
        region:
          type: string

    DeleteSecretPayload:
      title: deleteSecretPayload
      type: object
      properties:
        regions:
          type: array
          items:
            type: string
        softDelete:
          type: boolean
          description: Soft delete the secret

    SecretDTO:
      title: SecretDTO
      type: object
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        tenantId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        secret:
          keyName: DB-CRED_9d79e1f8-1bk3-4b79-8580-e935ea3b8ca3
          value: {"masterPassword": "Tessell123", "monitorPassword": "Pass10ZmBR3VA7", "saPassword": "Pass#1bQN6vK3kl"}
        secretType: TENANT_ASSET
        regionAvailability: [{name: "ap-south-1", cloudAccountId: 3fa85f64-5717-4562-b3fc-2c963f66afa6, externalId: "arn:aws:secretsmanager:ap-south-1:213776060323:secret:DB-CRED_9d79e1f8-1bk3-4b79-8580-e935ea3b8ca3-e9KLch", isPrimary: true}, {name: "us-east-1", cloudAccountId: 3fa85f64-5717-4562-b3fc-2c963f66afa6, externalId: "arn:aws:secretsmanager:us-east-1:213776060323:secret:DB-CRED_9d79e1f8-1bk3-4b79-8580-e935ea3b8ca3-e9KLch", isPrimary: false}]
        dateCreated: 2023-01-16T14:14:39.089000Z
        dateModified: 2023-01-16T14:14:39.089000Z
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
        secret:
          $ref: "#/components/schemas/Secret"
        secretType:
          $ref: '#/components/schemas/SecretType'
        groupId:
          type: string
        tags:
          description: The tags associated with the secret
          type: array
          items:
            $ref: 'common-specification.yaml#/components/schemas/TessellTag'
        regionAvailability:
          type: array
          description: Cloud and Location detail
          items:
            $ref: "#/components/schemas/SecretAvailabilityEntity"
        primaryAvailabilityExternalId:
          type: string
          description: primaryAvailabilityExternalId
        dateCreated:
          type: string
          format: date-time
          description: Timestamp when the secret was created
        dateModified:
          type: string
          format: date-time
          description: Timestamp when the secret was last modified, either by system or by user

    SecretKeyMapCreatePayload:
      title: SecretKeyMapCreatePayload
      type: object
      properties:
        cloud:
          "$ref": "common-specification.yaml#/components/schemas/cloudType"
        subscriptionId:
          format: uuid
          type: string
        cloudAccountId:
          format: uuid
          type: string
        region:
          type: string
        keyExternalID:
          type: string
      example:
        cloud: AWS
        subscriptionId: 5gh40f64-5717-4562-b3fc-2c963f66afa6
        cloudAccountId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        region: us-east-2
        keyExternalID: arn:aws:kms:ap-south-1:548045437132:key/mrk-515b486e4b90453e87a886dfc7199be0

    SecretKeyMapUpdatePayload:
      title: SecretKeyMapUpdatePayload
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SecretEncryptionKeyStatus'
      example:
        cloud: AWS
        subscriptionId: 5gh40f64-5717-4562-b3fc-2c963f66afa6
        cloudAccountId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        region: us-east-2
        keyExternalID: arn:aws:kms:ap-south-1:548045437132:key/mrk-515b486e4b90453e87a886dfc7199be0

    SecretsApiResponse:
      title: SecretsApiResponse
      type: object
      properties:
        metadata:
          $ref: "common-specification.yaml#/components/schemas/apiMetadata"
        response:
          type: array
          items:
            $ref: "#/components/schemas/SecretDTO"

    SecretsMigrationApiResponse:
      title: SecretsMigrationApiResponse
      type: object
      properties:
        metadata:
          $ref: "common-specification.yaml#/components/schemas/apiMetadata"
        errorMessage:
          description: error occurred during migration of secrets
          type: string
        response:
          type: array
          items:
            $ref: "#/components/schemas/SecretDTO"
    
    TagsAdditionApiResponse:
      title: TagsAdditionApiResponse
      type: object
      properties:
        metadata:
          $ref: "common-specification.yaml#/components/schemas/apiMetadata"
        errorMessage:
          description: error occurred during addition of tags
          type: string
        response:
          type: array
          items:
            $ref: "#/components/schemas/SecretAvailabilityEntity"
    
    SecretKeyMapApiResponse:
      title: SecretKeyMapApiResponse
      type: object
      properties:
        metadata:
          $ref: "common-specification.yaml#/components/schemas/apiMetadata"
        response:
          type: array
          items:
            $ref: "#/components/schemas/SecretEncryptionEntity"

    SecretType:
      title: SecretType
      type: string
      description: Type of a secret
      enum:
        - TENANT_ASSET
        - INFRA_ASSET
        - CLOUD_ACCOUNT_CREDENTIAL
        - SHARED_SECRET

    SecretAvailabilityStatus:
      title: SecretAvailabilityStatus
      type: string
      description: Status of the Secrets availability
      enum:
        - AVAILABLE
        - DELETED
        - DELETION_FAILED

    SecretEncryptionKeyStatus:
      title: SecretEncryptionKeyStatus
      type: string
      description: Status of the Secret encryption keys
      enum:
        - ACTIVE
        - INACTIVE

    SecretEntity:
      title: SecretEntity
      type: object
      description: This is a definition for Secrets in Tessell
      x-dao-entity: true
      x-dao-table-name: TESSELL_SECRETS
      x-dao-entity-annotations: |
        @Table(name = "TESSELL_SECRETS", uniqueConstraints = @UniqueConstraint(columnNames = {"id"}))
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        tenantId: 123e4567-e89b-12d3-a456-426614174000
        keyName: STRIPE_API_KEY_TERLS
        subscriptionId: 123e4567-e89b-12d3-a456-426614174000
        cloud: AWS
        cloudAccountId: 123e4567-e89b-12d3-a456-426614174000
        primaryAvailabilityId: 123e4567-e89b-12d3-a456-426614174000
        secretType: INFRA_ASSET
        dateCreated: 2000-01-23T04:56:07+00:00
        dateModified: 2000-01-23T04:56:07+00:00
      properties:
        id:
          x-dao-query: true
          x-dao-annotations: |
            @Id
            @Column(name = "id", updatable = false, nullable = false)
          description: generated UUID for the entity
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        tenantId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "tenant_id")
          description: Tenant ID
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        groupId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "group_id")
          description: Group ID, grouping the secrets
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        keyName:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "key_name", nullable = false)
            @NotNull
          description: Key Name
          example: masterPassword
          type: string
        cloudType:
          x-dao-query: true
          x-dao-annotations: |
            @Enumerated(EnumType.STRING)
            @NotNull
            @Type(type = "pgsql_enum")
            @Column(name = "cloud_type")
          description: Cloud
          allOf:
            - $ref: 'common-specification.yaml#/components/schemas/cloudType'
        subscriptionId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "subscription_id")
          description: subscriptionId
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        cloudAccountId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "cloud_account_id")
          description: cloudAccountId
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        primaryAvailabilityExternalId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "primary_availability_external_id")
          description: primaryAvailabilityExternalId
          example: "arn:aws:secretsmanager:ap-south-1:213776060323:secret:DB-CRED_9d79e1f8-1bk3-4b79-8580-e935ea3b8ca3-e9KLch"
          type: string
        secretType:
          x-dao-query: true
          x-dao-annotations: |
            @Enumerated(EnumType.STRING)
            @NotNull
            @Type(type = "pgsql_enum")
            @Column(name = "secret_type")
          description: Type of the secret
          allOf:
            - $ref: '#/components/schemas/SecretType'
        regionAvailability:
          x-dao-annotations: |
            @OneToMany(mappedBy = "secret", cascade = CascadeType.ALL)
          x-dto-annotations: |
            @JsonManagedReference
            @ToString.Exclude
          type: array
          description: Cloud and Location detail
          items:
            $ref: "#/components/schemas/SecretAvailabilityEntity"
        dateCreated:
          x-dao-annotations: |
            @Column(name = "date_created", columnDefinition = "TIMESTAMP WITH TIME ZONE NOT NULL", nullable = false, updatable = false)
            @CreationTimestamp
          description: Timestamp when the entity was created
          format: date-time
          type: string
        dateModified:
          x-dao-annotations: |
            @Column(name = "date_modified", columnDefinition = "TIMESTAMP WITH TIME ZONE NOT NULL", nullable = false)
            @UpdateTimestamp
          description: Timestamp when the entity was last modified
          format: date-time
          type: string

    SecretAvailabilityEntity:
      title: SecretAvailabilityEntity
      type: object
      description: This is a definition for Secrets Availability in Tessell
      x-dao-entity: true
      x-dao-table-name: TESSELL_SECRETS_AVAILABILITIES
      x-dao-entity-annotations: |
        @Table(name = "TESSELL_SECRETS_AVAILABILITIES")
      properties:
        id:
          x-dao-query: true
          x-dao-annotations: |
            @Id
            @Type(type = "pg-uuid")
            @GeneratedValue(strategy = GenerationType.AUTO)
            @Column(name = "id", updatable = false, nullable = false)
          type: string
          format: uuid
        secret:
          x-dao-foreign-key-reference: true
          x-dao-annotations: |
            @ManyToOne(fetch = FetchType.LAZY)
            @JoinColumn(name="secret_id", nullable=false)
          x-dto-annotations: |
            @ToString.Exclude
            @JsonBackReference
          allOf:
            - $ref: "#/components/schemas/SecretEntity"
        cloudLocation:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name="cloud_location", nullable = false)
          description: Cloud location of the secret
          type: string
        cloudAccountId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "cloud_account_id")
          description: cloudAccountId
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        externalId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name="external_id", nullable = false)
          description: External Id of the Secret
          type: string
          example: "arn:aws:secretsmanager:ap-south-1:213776060323:secret:DB-CRED_9d79e1f8-1bk3-4b79-8580-e935ea3b8ca3-e9KLch"
        secretEncryptionKeyId:
          x-dao-annotations: |
            @Column(name="secret_encryption_key_id")
          description: Id of the Secret Encryption Key used
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        status:
          x-dao-query: true
          x-dao-annotations: |
            @Enumerated(EnumType.STRING)
            @NotNull
            @Type(type = "pgsql_enum")
            @Column(name = "status")
          description: Status of the secret availability
          allOf:
            - $ref: '#/components/schemas/SecretAvailabilityStatus'
    SecretEncryptionEntity:
      title: SecretEncryptionEntity
      type: object
      description: This is the mapping of kms keys to be used for a given cloud location to encrypt the secrets in that cloud location
      x-dao-entity: true
      x-dao-table-name: TESSELL_SECRETS_ENCRYPTION
      x-dao-entity-annotations: |
        @Table(
          name = "TESSELL_SECRETS_ENCRYPTION", 
          uniqueConstraints = {
            @UniqueConstraint(columnNames = {"id"}),
            @UniqueConstraint(columnNames = {"cloud_account_id", "tenant_id", "region"})
          }
        )
      properties:
        id:
          x-dao-query: true
          x-dao-annotations: |
            @Id
            @Type(type = "pg-uuid")
            @GeneratedValue(strategy = GenerationType.AUTO)
            @Column(name = "id", updatable = false, nullable = false)
          description: generated UUID for the entity
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        tenantId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "tenant_id", nullable = false)
          description: Tenant ID
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        cloudAccountId:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "cloud_account_id")
          description: cloudAccountId
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        region:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "region")
          description: region
          example: us-east-1
          type: string
        keyExternalID:
          x-dao-query: true
          x-dao-annotations: |
            @Column(name = "key_external_id", nullable = false)
          description: keyExternalID
          example: arn:aws:kms:ap-south-1:548045437132:key/mrk-515b486e4b90453e87a886dfc7199be0
          type: string
        dateCreated:
          x-dao-annotations: |
            @Column(name = "date_created", columnDefinition = "TIMESTAMP WITH TIME ZONE NOT NULL", nullable = false, updatable = false)
            @CreationTimestamp
          description: Timestamp when the entity was created
          format: date-time
          type: string
        dateModified:
          x-dao-annotations: |
            @Column(name = "date_modified", columnDefinition = "TIMESTAMP WITH TIME ZONE NOT NULL", nullable = false)
            @UpdateTimestamp
          description: Timestamp when the entity was last modified
          format: date-time
          type: string
        status:
          x-dao-query: true
          x-dao-annotations: |
            @Enumerated(EnumType.STRING)
            @NotNull
            @Type(type = "pgsql_enum")
            @Column(name = "status")
          description: Status of the secret encryption key ID
          allOf:
            - $ref: '#/components/schemas/SecretEncryptionKeyStatus'

    BulkDeleteSecretsPayload:
      $ref: 'common-specification.yaml#/components/schemas/ResourceBulkDeletePayloadOps'
    BulkDeleteSecretsStatusPayload:
      $ref: 'common-specification.yaml#/components/schemas/ResourceBulkDeleteResponseOps'
